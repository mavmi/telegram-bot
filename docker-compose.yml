version: "3.8"

services:
  database:
    image: database-image
    container_name: database
    mem_limit: 75m
    profiles: ["dev", "prod"]
    build:
      context: ./
      dockerfile: docker/databaseDockerfile
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env
    volumes:
      - pg_vol:/var/lib/postgresql/data
      - db_vol:/db-files
    restart: always
    networks:
      internal_network:
        ipv4_address: 172.24.0.2

  monitoring_service:
    image: monitoring-service-image
    container_name: monitoring-service
    profiles: ["dev", "prod"]
    build:
      context: ./
      dockerfile: docker/monitoringServiceDockerfile
    volumes:
      - bot_vol:/bot-files
    restart: always
    networks:
      external_network:
        ipv4_address: 172.23.0.3
      internal_network:
        ipv4_address: 172.24.0.3
    depends_on:
      - database
    healthcheck:
      test: [ "CMD", "/bot-files/healthcheck/script/monitoring-service-health-check.sh" ]
      interval: 30s
      timeout: 10s
      retries: 5

  monitoring_telegram_bot:
    image: monitoring-telegram-bot-image
    container_name: monitoring-telegram-bot
    profiles: ["dev", "prod"]
    build:
      context: ./
      dockerfile: docker/monitoringTelegramBotDockerfile
    volumes:
      - bot_vol:/bot-files
    restart: always
    networks:
      external_network:
        ipv4_address: 172.23.0.4
    depends_on:
      monitoring_service:
        condition: service_healthy

  shakal_service:
    image: shakal-service-image
    container_name: shakal-service
    profiles: ["dev"]
    build:
      context: ./
      dockerfile: docker/shakalServiceDockerfile
    volumes:
      - bot_vol:/bot-files
    restart: always
    networks:
      external_network:
        ipv4_address: 172.23.0.5
      internal_network:
        ipv4_address: 172.24.0.5
    depends_on:
      - database
    healthcheck:
      test: [ "CMD", "/bot-files/healthcheck/script/shakal-service-health-check.sh" ]
      interval: 30s
      timeout: 10s
      retries: 5

  shakal_telegram_bot:
    image: shakal-telegram-bot-image
    container_name: shakal-telegram-bot
    profiles: ["dev"]
    build:
      context: ./
      dockerfile: docker/shakalTelegramBotDockerfile
    volumes:
      - bot_vol:/bot-files
    restart: always
    networks:
      external_network:
        ipv4_address: 172.23.0.6
    depends_on:
      shakal_service:
        condition: service_healthy

  water_stuff_service:
    image: water-stuff-service-image
    container_name: water-stuff-service
    profiles: ["dev", "prod"]
    build:
      context: ./
      dockerfile: docker/waterStuffServiceDockerfile
    volumes:
      - bot_vol:/bot-files
    restart: always
    networks:
      external_network:
        ipv4_address: 172.23.0.7
      internal_network:
        ipv4_address: 172.24.0.7
    depends_on:
      - database
    healthcheck:
      test: [ "CMD", "/bot-files/healthcheck/script/water-stuff-service-health-check.sh" ]
      interval: 30s
      timeout: 10s
      retries: 5

  water_stuff_telegram_bot:
    image: water-stuff-telegram-bot-image
    container_name: water-stuff-telegram-bot
    profiles: ["dev", "prod"]
    build:
      context: ./
      dockerfile: docker/waterStuffTelegramBotDockerfile
    volumes:
      - bot_vol:/bot-files
    restart: always
    networks:
      external_network:
        ipv4_address: 172.23.0.8
    depends_on:
      water_stuff_service:
        condition: service_healthy

volumes:
  pg_vol:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HOME}/services/telegram-bot/volumes/database

  db_vol:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HOME}/services/telegram-bot/volumes/db-files
  
  bot_vol:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HOME}/services/telegram-bot/volumes/bot-files

networks:
  external_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16
          gateway: 172.23.0.1

  internal_network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.24.0.0/16
          gateway: 172.24.0.1
